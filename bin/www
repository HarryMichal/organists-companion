#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('companion-server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var WebSocket = require('ws');
var jwt = require('jsonwebtoken');
var sqlite3 = require('sqlite3');
var config = require('../config/config');
var url = require('url');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Configure WebSocket server
 */

var db = new sqlite3.Database('./db/testdb.db', sqlite3.OPEN_READWRITE, (err) => {
 if (err) {
   console.error(err);
 };
});

var wss = new WebSocket.Server({
 'server': server,
 'path': "/api/ws",
 'clientTracking': true,
 'verifyClient': function(info, done) {
   var query = url.parse(info.req.url, true).query;
   if (info.origin === "http://localhost:3000") {
     var newDate = Math.round(new Date().getTime()/1000);
     if(newDate - query.exp < 0) {
        done(true);
     }
     else {
       done(false);
     }
   }
   else {
     done(false);
   }
 }
});
 
wss.on('connection', (ws, req) => {
  console.log("Connection was established.");
  db.get("SELECT type, number FROM meta WHERE id = 1", function(err, rows) {
    if (err) {
      console.error("Error while getting info from meta in the database.");
    }
    if (rows) {
      console.log("YAY2!");
      db.get("SELECT id, verse FROM songs WHERE id = ?", [rows.number], function(err, rows) {
        if (err) {
          console.error("Error while getting info from meta in the database.");
        }
        if (rows) {
          console.log("YAY3!");
          ws.send(JSON.stringify({ id: rows.id, verse: rows.verse, type: "song"}));
        }
      }); // ends if
    } // ends db if
  });
  ws.on('message', (data) => {
    var data = JSON.parse(data);
    
    switch(data.type) {
      case "song":
        console.log("My " + data.type + " is: " + data.number);
        db.run("UPDATE meta SET number = ?, type = ? WHERE id = 1", [data.number, data.type], function(err) {
          if (err) {
            console.error("Error while updating meta in the database.");
          }
          console.log("YAY1!");
          db.get("SELECT type, number FROM meta WHERE id = 1", function(err, rows) {
            if (err) {
              console.error("Error while getting info from meta in the database.");
            }
            if (rows) {
              console.log("YAY2!");
              db.get("SELECT id, verse FROM songs WHERE id = ?", [rows.number], function(err, rows) {
                if (err) {
                  console.error("Error while getting info from songs in the database.");
                }
                if (rows) {
                  console.log("YAY3!");
                  ws.send(JSON.stringify({ id: rows.id, verse: rows.verse, type: "song"}));
                }
              }); // ends if
            } // ends db if
          });
        });
        break;
      case "psalm":
        console.log("My " + data.type + " is: " + data.number);
        db.run("UPDATE meta SET number = ?, type = ? WHERE id = 1", [data.number, data.type], function(err) {
          if (err) {
            console.error("Error while updating meta in the database.");
          }
          db.get("SELECT type, number FROM meta WHERE id = 1", function(err, rows) {
            if (err) {
              console.error("Error while getting info from meta in the database.");
            }
            if (rows) {
              console.log("YAY2!");
              db.get("SELECT id, text FROM psalms WHERE id = ?", [rows.number], function(err, rows) {
                if (err) {
                  console.error("Error while getting info from psalms in the database.");
                }
                if (rows) {
                  console.log("YAY3!");
                  ws.send(JSON.stringify({ id: rows.id, text: rows.text, type: "psalm"}));
                }
              }); // ends if
            } // ends db if
          });
        });
        break;
    };
  });
  
  ws.onclose = function(e) {
    console.log("Socket has been closed.");
  };
  
  ws.onerror = function(err) {
    console.error("Socket encountered error: ", err.message, " Closing socket.");
    ws.close();
  };
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
if (data.indexOf("token")) {
  JSON.parse(data);
  jwt.verify(data.token, config.token.secret, { algorithms: ['HS256'] }, function(err, decoded) {
    if (err) {
      console.log("There was an error. (JWT)");
      return ws.close();
    }
    else {
      console.log(decoded);
      db.get("SELECT number, psalmtext FROM meta", function(err, rows) {
        if (err) {
          return console.error(err);
        } else if (rows) {
          var init_message = JSON.stringify(rows);
          return ws.send(init_message);
        }
      });
      return console.log("Verification went alright. Initial message was succesfully sent.");
    };
  })
}
*/
