#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('companion-server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var WebSocket = require('ws');
var jwt = require('jsonwebtoken');
var sqlite3 = require('sqlite3');
var config = require('../config/config');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// HTTPS setup
var sslOptions = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem'),
  passphrase: 'test'
};

/**
 * Create HTTPS server.
 */

var server = http.createServer(app);

/**
 * Configure WebSocket server
 */

var db = new sqlite3.Database('./db/testdb.db', sqlite3.OPEN_READWRITE, (err) => {
 if (err) {
   console.error(err);
 };
});

 var wss = new WebSocket.Server({
   'server': server,
   'path': "/api/ws",
   'clientTracking': true
 });
 
wss.on('connection', (ws, req) => {
  console.log("Connection was established.");
  ws.on('message', (data) => {
    if (data.indexOf("token")) {
      jwt.verify(data, config.token.secret, function(err, decoded) {
        if (err) {
          console.log("There was an error.");
          return ws.close();
        }
        else {
          console.log(decoded);
          db.get("SELECT number, psalmtext FROM meta", function(err, rows) {
            if (err) {
              return console.error(err);
            } else if (rows) {
              var init_message = JSON.stringify(rows);
              return ws.send(init_message);
            }
          });
          return console.log("Verification went alright. Initial message was succesfully sent.");
        };
      })
    }
    else if (data.indexOf("number")) {
      console.log("This contains a number: " + data);
    }
    else if (data.indexOf("psalm")) {
      console.log("This contains a psalm: " + data);
    }
    else {
      console.log("There was nothing: " + data);
      ws.close();
    }
  });
  ws.onclose = function(e) {
    console.log("Socket has been closed.")
  };
  ws.onerror = function(err) {
    console.error("Socket encountered error: ", err.message, " Closing socket.");
    ws.close();
  };
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
